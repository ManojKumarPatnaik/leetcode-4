class Solution
{
    public:
    bool canCross(vector<int>& stones) 
    {
        unordered_set<string> overall;
        unordered_set<int> total(stones.begin(),stones.end());
        if(total.find(0)==total.end())
        {
            return false;   
        }
        if(stones.size()>1&&total.find(1)==total.end())
        {
            return false;   
        }
        deque<int> q;
        deque<int> c;
        q.push_back(1);
        c.push_back(1);
        overall.insert("0,0");
        overall.insert("1,1");
        int f=0;
        while(q.size()>0)
        {
            int p=q.front();
            int k=c.front();
            q.pop_front();
            c.pop_front();
            if(p==stones.back())
            {
                return true;   
            }
            int a[3]={k-1,k,k+1};
            for(int i=0;i<3;i++)
            {
                if(total.find(p+a[i])!=total.end()&&overall.find(to_string(p+a[i])+","+to_string(a[i]))==overall.end())
                {
                    q.push_back(p+a[i]);
                    c.push_back(a[i]);
                    overall.insert(to_string(p+a[i])+","+to_string(a[i]));
                }
            }
        }
        return false;
    }
};