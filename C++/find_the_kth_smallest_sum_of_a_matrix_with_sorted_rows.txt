class Solution 
{
    public:
    int kthSmallest(vector<vector<int>>& mat, int k) 
    {
        unordered_set<string> v;
        priority_queue<pair<int,vector<int>>,vector<pair<int,vector<int>>>,greater<pair<int,vector<int>>>> q;
        int result=0;
        int m=mat.size();
        int n=mat[0].size();
        vector<int> total;
        string visited="";
        for(int i=0;i<m;i++)
        {
            total.push_back(0);
            result+=mat[i][0];
            visited+="0,";
        }
        v.insert(visited);
        q.push({result,total});
        for(int c=0;c<k;c++)
        {
            pair<int,vector<int>> p=q.top();
            result=p.first;
            vector<int> current=p.second;
            q.pop();
            for(int i=0;i<m;i++)
            {
                if(current[i]<n-1)
                {
                    vector<int> temp=current;
                    temp[i]=current[i]+1;
                    visited="";
                    for(int j=0;j<temp.size();j++)
                    {
                        visited+=to_string(temp[j])+",";
                    }
                    if(v.find(visited)==v.end())
                    {
                        q.push({result+mat[i][temp[i]]-mat[i][current[i]],temp});
                        v.insert(visited);
                    }
                }
            }
        }
        return result;
    }
};
