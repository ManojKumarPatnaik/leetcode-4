
class Solution {
public:
    vector<vector<int>> c;
    void test(map<int,map<int,map<int,int>>> total,map<int,map<int,int>> current,vector<vector<int>>& grid,int i,int j,int color,int original,int l,int r,int u,int d,int flag1,int flag2)
    {
        if(l==1&&r==1)
        {
            if(flag1==0)
            {
                l=0;
                flag1=1;
            }
            else if(flag1==1)
            {
                r=0;
            }
        }
        if(u==1&&d==1)
        {
            if(flag2==0)
            {
                u=0;
                flag2=1;
            }
            else if(flag2==1)
            {
                d=0;
            }
        }
        if(i<0||i>=grid.size()||j<0||j>=grid[0].size())
        {
            return;
        }
        
        if(i==0||i==grid.size()-1||j==0||j==grid[0].size()-1)
        {
            grid[i][j]=color;
        }
        else if(c[i-1][j]!=original||c[i+1][j]!=original||c[i][j-1]!=original||c[i][j+1]!=original)
        {
            grid[i][j]=color;
        }
        
                       
        if(i>0&&(u==0||current[i][j]==0)&&total[i][j][0]==0&&grid[i-1][j]==original)
        {
            total[i][j][0]=1;
            current[i][j]=1;
            d=1;
            test(total,current,grid,i-1,j,color,original,l,r,u,d,flag1,flag2);
            d=0;
        }
        if(i<grid.size()-1&&(d==0||current[i][j]==0)&&total[i][j][1]==0&&grid[i+1][j]==original)
        {
            total[i][j][1]=1;
            current[i][j]=1;
            u=1;
            test(total,current,grid,i+1,j,color,original,l,r,u,d,flag1,flag2);
            u=0;
        }
        if(j>0&&total[i][j][2]==0&&(l==0||current[i][j]==0)&&grid[i][j-1]==original)
        {
            total[i][j][2]=1;
            current[i][j]=1;
            r=1;
            test(total,current,grid,i,j-1,color,original,l,r,u,d,flag1,flag2);
            r=0;
        }
        if(j<grid[0].size()-1&&(r==0||current[i][j]==0)&&total[i][j][3]==0&&grid[i][j+1]==original)
        {
            total[i][j][3]=1;
            current[i][j]=1;
            l=1;
            test(total,current,grid,i,j+1,color,original,l,r,u,d,flag1,flag2);
            l=0;
        }

if(i>0&&i<grid.size()-1&&j>0&&j<grid[0].size()-1&&c[i-1][j]==original&&c[i+1][j]==original&&c[i][j]==original)
        {
            if(c[i][j+1]==original)
            {
                if(c[i-1][j+1]!=original)
                {
                    grid[i][j+1]=color;
                }
                else if(c[i+1][j+1]!=original)
                {
                    grid[i][j+1]=color;
                }
            }
            if(c[i][j-1]==original)
            {
                if(c[i-1][j-1]!=original)
                {
                    grid[i][j-1]=color;
                }
                else if(c[i+1][j-1]!=original)
                {
                    grid[i][j-1]=color;
                }
            }
        }
        if(i>0&&i<grid.size()-1&&j>0&&j<grid[0].size()-1&&c[i][j+1]==original&&c[i][j-1]==original&&c[i][j]==original)
        {
            if(c[i-1][j]==original)
            {
                if(c[i-1][j+1]!=original)
                {
                    grid[i-1][j]=color;
                }
                else if(c[i-1][j-1]!=original)
                {
                    grid[i-1][j]=color;
                }
            }
            if(c[i+1][j]==original)
            {
                if(c[i+1][j+1]!=original)
                {
                    grid[i+1][j]=color;
                }
                else if(c[i+1][j-1]!=original)
                {
                    grid[i+1][j]=color;
                }
            }
        }
     
    }
    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int r0, int c0, int color) 
    {
        map<int,map<int,map<int,int>>> total;
        map<int,map<int,int>> current;
        for(int i=0;i<grid.size();i++)
        {
            vector<int> temp;
            for(int j=0;j<grid[i].size();j++)
            {
                temp.push_back(grid[i][j]);
            }
            c.push_back(temp);
        }
        int original=grid[r0][c0];
        test(total,current,grid,r0,c0,color,original,0,0,0,0,0,0);
        return grid;
    }
};