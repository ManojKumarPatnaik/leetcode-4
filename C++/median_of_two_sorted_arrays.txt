class Solution 
{
    public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
        if((int)nums1.size()>(int)nums2.size())
        {
            return findMedianSortedArrays(nums2,nums1);
        }
        int m=nums1.size();
        int n=nums2.size();
        int c=(m+n+1)/2;
        int p1=0;
        int p2=m;
        while(true)
        {
            int i=(p1+p2)/2;
            int j=c-i;
            if(i>0&&j<n&&nums1[i-1]>nums2[j])
            {
                p2=i-1;
            }
            else if(j>0&&i<m&&nums2[j-1]>nums1[i])
            {
                p1=i+1;
            }
            else
            {
                int left_max=0;
                if(i==0)
                {
                    left_max=nums2[j-1];
                }
                else if(j==0)
                {
                    left_max=nums1[i-1];
                }
                else
                {
                    left_max=max(nums1[i-1],nums2[j-1]);
                }
                if((m+n)%2==1)
                {
                    return left_max;
                }
                int right_min=2147483647;
                if(i==m)
                {
                    right_min=nums2[j];
                }
                else if(j==n)
                {
                    right_min=nums1[i];
                }
                else
                {
                    right_min=min(nums1[i],nums2[j]);
                }
                return (double)(left_max+right_min)/(double)2;
            }
        }
        return -1;
    }
};