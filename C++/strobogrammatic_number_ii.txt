class Solution {
public:
    set<string> result;
    void test(string temp,int n,char a,char b,int flag)
    {
        if(flag==0)
        {
            test(temp,n,'1','1',1);
            test(temp,n,'8','8',1);
            test(temp,n,'6','9',1);
            test(temp,n,'9','6',1);
            if(temp.length()!=n-2||n==0)
            {
                test(temp,n,'0','0',1);
            }
        }
        else
        {
            if(temp.length()>=n)
            {
                if(temp[0]!='0'||n==0)
                {
                    result.insert(temp);
                }
                return;
            }
            temp=a+temp;
            temp=temp+b;
            test(temp,n,'1','1',1);
            temp=temp.substr(1,temp.length()-2);
            
            temp=a+temp;
            temp=temp+b;
            test(temp,n,'8','8',1);
            temp=temp.substr(1,temp.length()-2);
            
            temp=a+temp;
            temp=temp+b;
            test(temp,n,'6','9',1);
            temp=temp.substr(1,temp.length()-2);
            
            temp=a+temp;
            temp=temp+b;
            test(temp,n,'9','6',1);
            temp=temp.substr(1,temp.length()-2);
            if(temp.length()!=n-2)
            {
                temp=a+temp;
                temp=temp+b;
                test(temp,n,'0','0',1);
                temp=temp.substr(1,temp.length()-2);
            }
        }
        
    }
    vector<string> findStrobogrammatic(int n) 
    {
        string a="01689";
        map<char,char> total;
        total['0']='0';
        total['1']='1';
        total['6']='9';
        total['8']='8';
        total['9']='6';
        string temp="";
        if(n%2==1)
        {
            n-=1;
            temp='0';
            test(temp,n,' ',' ',0);
            temp='1';
            test(temp,n,' ',' ',0);
            temp='8';
            test(temp,n,' ',' ',0);
            
        }
        else
        {
            test(temp,n,' ',' ',0);
        }
        vector<string> output(result.begin(),result.end());
        sort(output.begin(),output.end());
        return output;
    }
};