class Solution 
{
    public:
    vector<int> r;
    bool result=false;
    void dfs(vector<int> temp,int target,int c)
    {
        int f=0;
        if(result==true)
        {
            return;
        }
        if(c>r.size())
        {
            return;
        }
        for(int i=0;i<temp.size();i++)
        {
            if(temp[i]>target)
            {
                f=1;
                break;
            }
        }
        if(f==1)
        {
            return;
        }
        int k=0;
        for(int i=0;i<temp.size();i++)
        {
            if(temp[i]!=target)
            {
                k=1;
                break;
            }
        }
        if(k==0)
        {
            result=true;
            return;
        }
        if(c==(int)r.size())
        {
            return;
        }
        for(int i=0;i<temp.size();i++)
        {
            temp[i]+=r[c];
            dfs(temp,target,c+1);
            temp[i]-=r[c];
        }
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) 
    {
        int s=0;
        for(int i=0;i<nums.size();i++)
        {
            s+=nums[i];
        }
        if(s%k!=0)
        {
            return false;
        }
        int t=s/k;
        sort(nums.rbegin(),nums.rend());
        vector<int> temp(k,0);
        r=nums;
        if(k<2)
        {
            temp[0]=nums[0];
            dfs(temp,t,1);
        }
        else if(k<3)
        {
            temp[0]=nums[0];
            temp[1]=nums[1];
            dfs(temp,t,2);
            temp[0]=nums[0]+nums[1];
            temp[1]=0;
            dfs(temp,t,2);
        }
        else
        {
            temp[0]=nums[0];
            temp[1]=nums[1];
            temp[2]=nums[2];
            dfs(temp,t,3);
            temp[0]=nums[0]+nums[1];
            temp[1]=nums[2];
            temp[2]=0;
            dfs(temp,t,3);
            temp[0]=nums[0]+nums[2];
            temp[1]=nums[1];
            temp[2]=0;
            dfs(temp,t,3);
            temp[0]=nums[1]+nums[2];
            temp[1]=nums[0];
            temp[2]=0;
            dfs(temp,t,3);
            temp[0]=nums[0]+nums[1]+nums[2];
            temp[1]=0;
            temp[2]=0;
            dfs(temp,t,3);
            
        }
        return result;
    }
};