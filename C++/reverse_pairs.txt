class Solution
{
    public:
    vector<int> tree;
    int getSum(int i)
    {
        int s=0;
        while(i>0)
        {
            s+=tree[i];
            i-=i&-i;
        }
        return s;
    }
    void update(int i)
    {
        while(i<tree.size())
        {
            tree[i]++;
            i+=i&-i;
        }
    }
    int reversePairs(vector<int>& nums) 
    {
        int result=0;
        int n=nums.size();
        tree=vector<int>(n+1,0);
        vector<int> s=nums;
        sort(s.begin(),s.end());
        unordered_map<int,int> m;
        for(int i=0;i<n;i++)
        {
            m[s[i]]=i+1;
        }
        for(int i=n-1;i>-1;i--)
        {
            result+=getSum(lower_bound(s.begin(),s.end(),(double)nums[i]/2.0)-s.begin());
            update(m[nums[i]]);
        }
        return result;
    }
};