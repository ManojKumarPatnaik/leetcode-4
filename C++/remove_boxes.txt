class Solution 
{
    vector<vector<vector<int>>> m;
    public:
    int dfs(vector<int>& boxes,int i,int j,int k)
    {
        if(i>j)
        {
            return 0;
        }
        while(i<j&&boxes[j]==boxes[j-1])
        {
            j--;
            k++;
        }
        if(m[i][j][k]>0)
        {
            return m[i][j][k];
        }
        m[i][j][k]=dfs(boxes,i,j-1,0)+(k+1)*(k+1);
        for(int index=i;index<j;index++)
        {
            if(boxes[index]==boxes[j])
            {
                m[i][j][k]=max(m[i][j][k],dfs(boxes,i,index,k+1)+dfs(boxes,index+1,j-1,0));
            }
        }
        return m[i][j][k];
    }
    int removeBoxes(vector<int>& boxes) 
    {
        int n=boxes.size();
        m=vector<vector<vector<int>>>(n,vector<vector<int>>(n,vector<int>(n,0)));
        return dfs(boxes,0,n-1,0);
    }
};