class Solution {
public:
    vector<vector<int>> result;
    map<string,int> total;
    void dfs(vector<int> nums,vector<int> temp,int index)
    {
        if(index>=nums.size())
        {
            if(temp.size()>1)
            {
                string r="";
                for(int i=0;i<temp.size();i++)
                {
                    r+=to_string(temp[i]);
                    r+=",";
                }
                if(total.find(r)!=total.end())
                {
                    return;
                }
                total[r]=1;
                result.push_back(temp);
            }
            return;
        }
        if(temp.size()==0||temp.back()<=nums[index])
        {
            temp.push_back(nums[index]);
            dfs(nums,temp,index+1);
            temp.pop_back();
        }
        dfs(nums,temp,index+1);
    }
    vector<vector<int>> findSubsequences(vector<int>& nums)
    {
        vector<int> temp;
        dfs(nums,temp,0);
        return result;
    }
};