/*
// Definition for a Node.
class Node {
public:
    int val = NULL;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes an n-ary tree to a binary tree.
    TreeNode* encode(Node* root) 
    {
        if(root==NULL)
        {
            return NULL;   
        }
        TreeNode* result=new TreeNode(root->val);
        TreeNode* cur;
        if(root->children.size()>0)
        {
            result->left=encode(root->children[0]);
            cur=result->left;
        }
        for(int i=1;i<root->children.size();i++)
        {
            cur->right=encode(root->children[i]);
            cur=cur->right;
        }
        return result;
    }

    // Decodes your binary tree to an n-ary tree.
    Node* decode(TreeNode* root) 
    {
        if(root==NULL)
        {
            return NULL;   
        }
        vector<Node*> t;
        Node* result=new Node(root->val,t);
        
        Node* l=decode(root->left);
        if(l!=NULL)
        {
            result->children.push_back(l);
        }
        TreeNode* cur=root->left;
        while(cur&&cur->right)
        {
            Node* r=decode(cur->right);
            if(r!=NULL)
            {
                result->children.push_back(r);
            }
            cur=cur->right;
        }
        return result;
        
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.decode(codec.encode(root));