class Solution 
{
    public:
    int c=0;
    void dfs(vector<vector<int>>& A,int i,int j)
    {
        if(i<0||j<0||i>=A.size()||j>=A[0].size()||A[i][j]==0)
        {
            return;   
        }
        A[i][j]=0;
        c++;
        dfs(A,i+1,j);
        dfs(A,i-1,j);
        dfs(A,i,j+1);
        dfs(A,i,j-1);
    }
    int largestIsland(vector<vector<int>>& grid) 
    {
        int result=0;
        vector<vector<int>> original;
        for(int i=0;i<grid.size();i++)
        {
            original.push_back(vector<int>(grid[i].begin(),grid[i].end()));   
        }
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
            {
                c=0;
                grid=original;
                if(grid[i][j]==0)
                {
                    grid[i][j]=1;
                    dfs(grid,i,j);
                }
                else
                {
                    dfs(grid,i,j); 
                }
                result=max(result,c);
            }
        }
        return result;
    }
};