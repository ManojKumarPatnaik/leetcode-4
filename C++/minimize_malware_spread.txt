class Solution 
{
    public:
    int f(int x)
    {
        if(x!=p[x])
        {
            x=f(p[x]);
        }
        return x;
    }
    void u(int x,int y)
    {
        if(f(x)!=f(y))
        {
            flag=1;
        }
        else
        {
            return;
        }
        if(numbers[f(x)]<numbers[f(y)])
        {
            numbers[f(y)]+=numbers[f(x)];
            numbers[f(x)]=0;
            p[f(x)]=f(y);
        }
        else
        {
            numbers[f(x)]+=numbers[f(y)];
            numbers[f(y)]=0;
            p[f(y)]=f(x);
        }
    }
    vector<int> p;
    vector<int> numbers;
    int flag=0;
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) 
    {
        sort(initial.begin(),initial.end());
        unordered_set<int> overall(initial.begin(),initial.end());
        int n=graph.size();
        for(int i=0;i<n;i++)
        {
            p.push_back(i);
            numbers.push_back(1);
        }
        while(true)
        {
            flag=0;
            for(int i=0;i<n;i++)
            {
                for(int j=0;j<i;j++)
                {
                    if(graph[i][j]==1&&(numbers[f(i)]!=1||numbers[f(j)]!=1||overall.find(i)!=overall.end()||overall.find(j)!=overall.end()))
                    {
                        u(i,j);
                    }
                }
            }
            if(flag==0)
            {
                break;
            }
        }
        unordered_map<int,int> g;
        for(int i=0;i<initial.size();i++)
        {
            g[f(initial[i])]++;
        }
        int M=0;
        for(int i=0;i<n;i++)
        {
            if(overall.find(i)!=overall.end()&&g[f(i)]==1)
            {
                M=max(M,numbers[f(i)]);
            }
        }
        for(int i=0;i<n;i++)
        {
            if(overall.find(i)!=overall.end()&&g[f(i)]==1&&numbers[f(i)]==M)
            {
                return i;
            }
        }
        return initial[0];
    }
};