class Solution
{
    public:
    int trapRainWater(vector<vector<int>>& heightMap) 
    {
        if(heightMap.size()==0)
        {
            return 0;
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
        int result=0;
        int maximum=0;
        int m=heightMap.size();
        int n=heightMap[0].size();
        unordered_set<int> v;
        int dx[4]={1,0,-1,0};
        int dy[4]={0,1,0,-1};
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0||j==0||i==m-1||j==n-1)
                {
                    q.push({heightMap[i][j],i*n+j});
                    v.insert(i*n+j);
                }
            }
        }
        while(q.size()>0)
        {
            pair<int,int> t=q.top();
            q.pop();
            int h=t.first;
            int r=t.second/n;
            int c=t.second%n;
            maximum=max(maximum,h);
            result+=maximum-h;
            for(int i=0;i<4;i++)
            {
                int x=r+dx[i];
                int y=c+dy[i];
                if(x>0&&y>0&&x<m-1&&y<n-1&&v.find(x*n+y)==v.end())
                {
                    q.push({heightMap[x][y],x*n+y});
                    v.insert(x*n+y);
                }
            }
        }
        return result;
    }
};