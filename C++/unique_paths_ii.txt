class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) 
    {
        if(obstacleGrid.size()==0)
        {
            return 0;
        }
        if(obstacleGrid[0][0]==1)
        {
            return 0;
        }
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        if(obstacleGrid[m-1][n-1]==1)
        {
            return 0;
        }
        long long dp[m][n];
        memset(dp,0,sizeof(dp));
        dp[0][0]=(long long)1;
        for(int i=1;i<m;i++)
        {
            if(obstacleGrid[i][0]==0)
            {
                dp[i][0]=dp[i-1][0];
            }
            else
            {
                dp[i][0]=0;
            }
        }
        for(int j=1;j<n;j++)
        {
            if(obstacleGrid[0][j]==0)
            {
                dp[0][j]=dp[0][j-1];
            }
            else
            {
                dp[0][j]=(long long)0;
            }
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                if(obstacleGrid[i][j]==0)
                {
                    dp[i][j]=(long long)dp[i-1][j]+(long long)dp[i][j-1];
                }
                else
                {
                    dp[i][j]=(long long)0;
                }
            }
        }
        
        return (int)dp[m-1][n-1];
    }
};