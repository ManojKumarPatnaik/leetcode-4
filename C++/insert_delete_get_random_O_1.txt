class RandomizedSet {
public:
    /** Initialize your data structure here. */
    unordered_map<int,int> total;
    vector<int> overall;
    RandomizedSet() 
    {
        srand(time(NULL));    
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) 
    {
        bool result;
        if(total.find(val)==total.end()||total[val]==-100)
        {
            result=true;
            total[val]=100;
            overall.push_back(val);
        }
        else
        {
            result=false;
        }
        
        return result;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val)
    {
        bool result;
        if(total.find(val)!=total.end()&&total[val]==100)
        {
            result=true;
            total[val]=-100;   
        }
        else
        {
            result=false;
        }
        return result;
    }
    
    /** Get a random element from the set. */
    int getRandom() 
    {
        int n=overall.size();
        int i=rand()%n;
        while(total[overall[i]]==-100)
        {
            i=rand()%n;        
        }
        return overall[i];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */