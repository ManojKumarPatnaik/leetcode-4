class Solution 
{
    public:
    int dfs(int node,int depth)
    {
        if(g[node]>=0)
        {
            return g[node];
        }
        g[node]=depth;
        int minDepth=n;
        for(int i=0;i<edges[node].size();i++)
        {
            if(g[edges[node][i]]==depth-1)
            {
                continue;
            }
            int next=dfs(edges[node][i],depth+1);
            if(next<=depth)
            {
                total.insert({min(node,edges[node][i]),max(node,edges[node][i])});
            }
            minDepth=min(minDepth,next);
        }
        g[node]=n;
        return minDepth;
    }
    unordered_map<int,vector<int>> edges;
    vector<int> g;
    set<pair<int,int>> total;
    int n;
    vector<vector<int>> criticalConnections(int s, vector<vector<int>>& connections) 
    {
        vector<vector<int>> result;
        n=s;
        g=vector<int>(n,-2);
        for(int i=0;i<connections.size();i++)
        {
            edges[connections[i][0]].push_back(connections[i][1]);
            edges[connections[i][1]].push_back(connections[i][0]);
        }
        dfs(0,0);
        for(int i=0;i<connections.size();i++)
        {
            int m=min(connections[i][0],connections[i][1]);
            int M=max(connections[i][0],connections[i][1]);
            if(total.find({m,M})==total.end())
            {
                result.push_back({m,M});
            }
        }
        return result;
    }
};