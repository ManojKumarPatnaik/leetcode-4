/*
// Definition for an Interval.
class Interval {
public:
    int start;
    int end;

    Interval() {}

    Interval(int _start, int _end) {
        start = _start;
        end = _end;
    }
};
*/
bool compare(Interval* a,Interval* b)
{
    if(a->end!=b->end)
    {
        return a->end<b->end;   
    }
    return a->start<b->start;
}
class Solution 
{
    public:
    vector<Interval*> employeeFreeTime(vector<vector<Interval*>> schedule)
    {
        vector<Interval*> output;
        vector<Interval*> result;
        for(int i=0;i<schedule.size();i++)
        {
            for(int j=0;j<schedule[i].size();j++)
            {
                int q=0;
                for(int k=0;k<result.size();k++)
                {
                    if(schedule[i][j]->start>=result[k]->start&&schedule[i][j]->start<result[k]->end)
                    {
                        result.push_back(new Interval(min(schedule[i][j]->start,result[k]->start),max(schedule[i][j]->end,result[k]->end)));
                        result.erase(result.begin()+k);
                        q=1;
                    }
                    else if(schedule[i][j]->end>result[k]->start&&schedule[i][j]->end<=result[k]->end)
                    {
                        result.push_back(new Interval(min(schedule[i][j]->start,result[k]->start),max(schedule[i][j]->end,result[k]->end)));
                        result.erase(result.begin()+k);                        
                        q=1;
                    }
                    else if(schedule[i][j]->start<=result[k]->start&&schedule[i][j]->end>=result[k]->end)
                    {
                        result.push_back(new Interval(min(schedule[i][j]->start,result[k]->start),max(schedule[i][j]->end,result[k]->end)));
                        result.erase(result.begin()+k);                        
                        q=1;
                    }
                }
                if(q==0)
                {
                    result.push_back(schedule[i][j]);
                }
            }
        }
        while(true)
        {
            int f=0;
            for(int i=0;i<(int)result.size()-1;i++)
            {
                for(int j=i+1;j<result.size();j++)
                {
                    if(result[j]->start>=result[i]->start&&result[j]->start<result[i]->end)
                    {
                        result.push_back(new Interval(min(result[i]->start,result[j]->start),max(result[i]->end,result[j]->end)));
                        result.erase(result.begin()+j);
                        result.erase(result.begin()+i);
                        f=1;
                        break;
                    }
                    else if(result[j]->end>result[i]->start&&result[j]->end<=result[i]->end)
                    {
                        result.push_back(new Interval(min(result[i]->start,result[j]->start),max(result[i]->end,result[j]->end)));
                        result.erase(result.begin()+j);
                        result.erase(result.begin()+i);
                        f=1;
                        break;
                    }
                    else if(result[j]->start<=result[i]->start&&result[j]->end>=result[i]->end)
                    {
                        result.push_back(new Interval(min(result[i]->start,result[j]->start),max(result[i]->end,result[j]->end)));
                        result.erase(result.begin()+j);
                        result.erase(result.begin()+i);
                        f=1;
                        break;
                    }
                }
                if(f==1)
                {
                    break;   
                }
            }
            if(f==0)
            {
                break;   
            }
        }
        sort(result.begin(),result.end(),compare);
        for(int i=1;i<result.size();i++)
        {
            if(result[i-1]->end!=result[i]->start)
            {
                output.push_back(new Interval(result[i-1]->end,result[i]->start));   
            }
        }
        return output;
    }
};