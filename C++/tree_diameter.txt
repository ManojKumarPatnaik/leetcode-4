class Solution 
{
    public:
    int treeDiameter(vector<vector<int>>& edges) 
    {
        if(edges.size()==0)
        {
            return 0;
        }
        int result=0;
        map<int,vector<int>> total;
        for(int i=0;i<edges.size();i++)
        {
            total[edges[i][0]].push_back(edges[i][1]);
            total[edges[i][1]].push_back(edges[i][0]);
        }
        set<int> o1;
        deque<int> q1;
        deque<int> c1;
        q1.push_back(edges[0][0]);
        o1.insert(edges[0][0]);
        int f=-1;
        while(q1.size()>0)
        {
            int p1=q1.front();
            q1.pop_front();
            f=p1;
            for(int i=0;i<total[p1].size();i++)
            {
                if(o1.find(total[p1][i])==o1.end())
                {
                    q1.push_back(total[p1][i]);
                    o1.insert(total[p1][i]);
                }
            }
        }
        q1.clear();
        o1.clear();
        q1.push_back(f);
        c1.push_back(0);
        while(q1.size()>0)
        {
            int p1=q1.front();
            int k1=c1.front();
            q1.pop_front();
            c1.pop_front();
            result=k1;
            for(int i=0;i<total[p1].size();i++)
            {
                if(o1.find(total[p1][i])==o1.end())
                {
                    q1.push_back(total[p1][i]);
                    c1.push_back(k1+1);
                    o1.insert(total[p1][i]);
                }
            }
        }
        return result;
    }
};