class Solution 
{
    public:
    bool check(int input)
    {
        string result="";
        while(input)
        {
            result=to_string(input%2)+result;
            input>>=1;
        }
        for(int i=1;i<result.length();i++)
        {
            if(result[i]=='1'&&result[i-1]=='1')
            {
                return false;
            }
        }
        return true;
    }
    int counter(int input)
    {
        int result=0;
        while(input)
        {
            result+=input%2;
            input>>=1;
        }
        return result;
    }
    bool adjacent(int a,int b)
    {
        string f1="";
        string f2="";
        while(a)
        {
            f1=to_string(a%2)+f1;
            a>>=1;
        }
        while(b)
        {
            f2=to_string(b%2)+f2;
            b>>=1;
        }
        int l=max((int)f1.length(),(int)f2.length());
        int l1=f1.length();
        int l2=f2.length();
        for(int i=l1;i<l;i++)
        {
            f1="0"+f1;
        }
        for(int i=l2;i<l;i++)
        {
            f2="0"+f2;
        }
        for(int i=0;i<l;i++)
        {
            if(i-1>=0)
            {
                if(f1[i]=='1'&&f2[i-1]=='1')
                {
                    return true;
                }
            }
            if(i+1<l)
            {
                if(f1[i]=='1'&&f2[i+1]=='1')
                {
                    return true;
                }
            }
        }
        return false;
    }
    int maxStudents(vector<vector<char>>& seats) 
    {
        int result=0;
        int m=seats.size();
        int n=seats[0].size();
        int states=pow(2,n);
        int d1[states];
        int d2[states];
        memset(d1,0,sizeof(d1));
        memset(d2,0,sizeof(d2));
        for(int i=0;i<states;i++)
        {
            int flag=0;
            if(!check(i))
            {
                d1[i]=-1;
                continue;
            }
            for(int j=0;j<n;j++)
            {
                if(((i>>j)&1)&&seats[m-1][j]=='#')
                {
                    flag=1;
                    d1[i]=-1;
                    break;
                }
            }
            if(flag==0)//available
            {
                d1[i]=counter(i);
            }
        }
        for(int i=m-2;i>-1;i--)
        {
            for(int j=0;j<states;j++)
            {
                int flag=0;
                if(!check(j))
                {
                    d2[j]=-1;
                    continue;
                }
                for(int k=0;k<n;k++)
                {
                    if(((j>>k)&1)&&seats[i][k]=='#')
                    {
                        flag=1;
                        d2[j]=-1;
                        break;
                    }
                }
                if(flag==0)
                {
                    for(int k=0;k<states;k++)
                    {
                        if(d1[k]==-1)
                        {
                            continue;
                        }
                        if(adjacent(j,k))
                        {
                            continue;
                        }
                        d2[j]=max(d2[j],d1[k]+counter(j));
                    }
                }
            }
            for(int j=0;j<states;j++)
            {
                d1[j]=d2[j];
                d2[j]=0;
            }
        }
        for(int i=0;i<states;i++)
        {
            result=max(result,d1[i]);
        }
        return result;
    }
};