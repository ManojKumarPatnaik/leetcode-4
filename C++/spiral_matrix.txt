










class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) 
    {
        vector<int> result;
        if(matrix.size()==0)
        {
            return result;
        }
        if(matrix[0].size()==0)
        {
            return result;
        }
        int d=0;//0:right, 1:down, 2:left, 3:up
        int m=matrix.size();
        int n=matrix[0].size();
        int a[m][n];
        memset(a,0,sizeof(a));
        int p1=0;
        int p2=0;
        result.push_back(matrix[p1][p2]);
        a[p1][p2]=1;
        int counter=0;
        while(true)
        {
            if(d==0)
            {
                p2++;
                if(p1<m&&p2<n&&p1>-1&&p2>-1&&a[p1][p2]==0)
                {
                    result.push_back(matrix[p1][p2]);
                    a[p1][p2]=1;
                    counter=0;
                }
                else
                {
                    d=(d+1)%4; 
                    p2--;
                    counter+=1;
                }
            }
            else if(d==1)
            {
                p1++;
                if(p1<m&&p2<n&&p1>-1&&p2>-1&&a[p1][p2]==0)
                {
                    result.push_back(matrix[p1][p2]);
                    a[p1][p2]=1;
                    counter=0;
                }
                else
                {
                    d=(d+1)%4;
                    p1--;
                    counter+=1;
                }
            }
            else if(d==2)
            {
                p2--;
                if(p1<m&&p2<n&&p1>-1&&p2>-1&&a[p1][p2]==0)
                {
                    result.push_back(matrix[p1][p2]);
                    a[p1][p2]=1;
                    counter=0;
                }
                else
                {
                    d=(d+1)%4;
                    p2++;
                    counter+=1;
                }
            }
            else if(d==3)
            {
                p1--;
                if(p1<m&&p2<n&&p1>-1&&p2>-1&&a[p1][p2]==0)
                {
                    result.push_back(matrix[p1][p2]);
                    a[p1][p2]=1;
                    counter=0;
                }
                else
                {
                    d=(d+1)%4;
                    p1++;
                    counter+=1;
                }
            }
            if(counter==4)
            {
                break;
            }
        }
        return result;
    }
};