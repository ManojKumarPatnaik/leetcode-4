class Solution 
{
    public:
    vector<string> spellchecker(vector<string>& wordlist, vector<string>& queries)
    {
        vector<string> result;
        unordered_map<string,vector<string>> total;
        unordered_map<string,vector<string>> real;
        unordered_set<string> overall;
        unordered_set<char> v;
        v.insert('a');
        v.insert('e');
        v.insert('i');
        v.insert('o');
        v.insert('u');
        v.insert('A');
        v.insert('E');
        v.insert('I');
        v.insert('O');
        v.insert('U');
        for(int i=0;i<wordlist.size();i++)
        {
            int l=wordlist[i].length();
            string temp="";
            string current="";
            for(int j=0;j<l;j++)
            {
                if(wordlist[i][j]>='A'&&wordlist[i][j]<='Z')
                {
                    temp+=(char)(wordlist[i][j]+32);
                }
                else
                {
                    temp+=wordlist[i][j];
                }
            }
            for(int j=0;j<l;j++)
            {
                if(v.find(wordlist[i][j])!=v.end())
                {
                    current+='a';
                }
                else if(wordlist[i][j]>='A'&&wordlist[i][j]<='Z')
                {
                    current+=(char)(wordlist[i][j]+32);
                }
                else
                {
                    current+=wordlist[i][j];
                }
            }
            overall.insert(wordlist[i]);
            total[temp].push_back(wordlist[i]);
            real[current].push_back(wordlist[i]);
        }
        for(int i=0;i<queries.size();i++)
        {
            if(overall.find(queries[i])!=overall.end())
            {
                result.push_back(queries[i]);
                continue;
            }
            int l=queries[i].length();
            string temp="";
            string current="";
            for(int j=0;j<l;j++)
            {
                if(queries[i][j]>='A'&&queries[i][j]<='Z')
                {
                    temp+=(char)(queries[i][j]+32);
                }
                else
                {
                    temp+=queries[i][j];
                }
            }
            for(int j=0;j<l;j++)
            {
                if(v.find(queries[i][j])!=v.end())
                {
                    current+='a';
                }
                else if(queries[i][j]>='A'&&queries[i][j]<='Z')
                {
                    current+=(char)(queries[i][j]+32);
                }
                else
                {
                    current+=queries[i][j];
                }
            }
            if(total.find(temp)!=total.end())
            {
                result.push_back(total[temp][0]);
            }
            else if(real.find(current)!=real.end())
            {
                result.push_back(real[current][0]);
            }
            else
            {
                result.push_back("");
            }
            
        }
        return result;
    }
};