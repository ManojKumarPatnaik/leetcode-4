class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) 
    {
        vector<int> result;
        unordered_map<int,int> total;
        int c=0;
        for(int i=0;i<edges.size();i++)
        {
            if(total.find(edges[i][0])!=total.end()&&total.find(edges[i][1])!=total.end())
            {
                if(total[edges[i][0]]==total[edges[i][1]])
                {
                    return edges[i];
                }
                else
                {
                    int a=total[edges[i][1]];
                    for(unordered_map<int,int>::iterator it=total.begin();it!=total.end();it++)
                    {
                        if(total[it->first]==a)
                        {
                            total[it->first]=total[edges[i][0]];
                        }
                    }
                }
            }
            else if(total.find(edges[i][0])!=total.end())
            {
                total[edges[i][1]]=total[edges[i][0]];
            }
            else if(total.find(edges[i][1])!=total.end())
            {
                total[edges[i][0]]=total[edges[i][1]];
            }
            else
            {
                total[edges[i][0]]=c;
                total[edges[i][1]]=c;
                c++;
            }
        }
        return result;
    }
};