class Solution 
{
    public:
    vector<vector<int> > overall;
    int goal=0;
    void test()
    {
        for(int i=0;i<=100;i++)
        {
            for(int j=i;j<=100;j++)
            {
                for(int k=j;k<=100;k++)
                {
                    if(i+j+k==goal)
                    {
                        vector<int> temp;
                        temp.push_back(i);
                        temp.push_back(j);
                        temp.push_back(k);
                        overall.push_back(temp);
                    }
                    else if(i+j+k>goal)
                    {
                        break;
                    }
                }
                if(i+j>goal)
                {
                    break;
                }
            }
            if(i>goal)
            {
                break;
            }
        }
    }
    int threeSumMulti(vector<int>& A, int target) 
    {
        long long result=0;
        goal=target;
        int counter=0;
        int m=1000000007;
        long long int total[101];
        memset(total,0,sizeof(total));
        for(int i=0;i<A.size();i++)
        {
            total[A[i]]+=1;
        }
        test();
        for(int i=0;i<overall.size();i++)
        {
            if(overall[i][0]==overall[i][1]&&overall[i][1]==overall[i][2])
            {
                long long c=total[overall[i][0]]%m;
                result+=c*(c-1)*(c-2)/6;
                result%=m;
            }
            else if(overall[i][0]==overall[i][1])
            {
                long long current=0;
                current=(total[overall[i][0]]*(total[overall[i][0]]-1)/2)%m;
                current*=(total[overall[i][2]]%m);
                result+=current;
                result%=m;
            }
            else if(overall[i][1]==overall[i][2])
            {
                long long current=0;
                current=(total[overall[i][1]]*(total[overall[i][1]]-1)/2)%m;
                current*=(total[overall[i][0]]%m);
                result+=current%m;
                result%=m;
            }
            else
            {
                result+=(total[overall[i][0]]%m)*(total[overall[i][1]]%m)*(total[overall[i][2]]%m);
                result%=m;
            }
        }
        return (int)result%m;
    }
};