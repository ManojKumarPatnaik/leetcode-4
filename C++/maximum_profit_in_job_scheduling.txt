bool compare(vector<int> a,vector<int> b)
{
    return a[1]<b[1];   
}
class Solution
{
    public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) 
    {
        int n=startTime.size();
        int result=0;
        vector<vector<int>> temp;
        for(int i=0;i<n;i++)
        {
            temp.push_back({startTime[i],endTime[i],{profit[i]}});   
        }
        sort(temp.begin(),temp.end(),compare);
        vector<int> s;
        vector<int> e;
        vector<int> p;
        for(int i=0;i<n;i++)
        {
            s.push_back(temp[i][0]);
            e.push_back(temp[i][1]);
            p.push_back(temp[i][2]);
        }

        int dp[n];
        memset(dp,0,sizeof(dp));
        for(int i=0;i<n;i++)
        {
            if(i==0)
            {
                dp[i]=p[i];   
            }
            else
            {
                vector<int>::iterator up;
                up=upper_bound(e.begin(),e.end(),s[i]);
                int index=(int)(up-e.begin());
                if(index==0)
                {
                    dp[i]=max(dp[i-1],p[i]);   
                }
                else
                {
                    dp[i]=max(dp[i-1],p[i]+dp[index-1]);
                }
            }
        }
        return dp[n-1];
    }
};