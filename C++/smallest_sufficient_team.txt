class Solution 
{
    public:
    vector<int> smallestSufficientTeam(vector<string>& req_skills, vector<vector<string>>& people) 
    {
        map<string,int> total;
        for(int i=0;i<req_skills.size();i++)
        {
            total[req_skills[i]]=i;
        }
        int current=(1<<((int)req_skills.size()))-1;
        vector<int> bit_people;
        for(int i=0;i<people.size();i++)
        {
            int c=0;
            for(int j=0;j<people[i].size();j++)
            {
                c|=1<<(total[people[i][j]]);
            }
            bit_people.push_back(c);
        }
        map<int,map<int,int>> record;
        map<int,map<int,vector<int>>> pointer;
        int dp[(int)people.size()+1][current+1];
        int r[(int)people.size()+1][current+1];
        memset(dp,0,sizeof(dp));
        memset(r,0,sizeof(r));
        r[0][0]=1;
        pointer[0][0]={0,0};
        for(int i=0;i<people.size();i++)
        {
            for(int j=0;j<bit_people.size();j++)
            {
                for(int k=0;k<current;k++)
                {
                    if(r[i][k]!=0&&r[i+1][k|bit_people[j]]==0)
                    {
                        pointer[i+1][k|bit_people[j]]={i,k};
                        record[i+1][k|bit_people[j]]=j;
                        dp[i+1][k|bit_people[j]]=1;
                        r[i+1][k|bit_people[j]]=1;
                        if((k|bit_people[j])==current)
                        {
                            vector<int> result;
                            int x=i+1;
                            int y=k|bit_people[j];
                            while(pointer[x][y][0]!=0)
                            {
                                result.push_back(record[x][y]);
                                int t1=x;
                                int t2=y;
                                x=pointer[t1][t2][0];
                                y=pointer[t1][t2][1];
                            }
                            result.push_back(record[x][y]);
                            return result;
                        }
                    }
                }
            }
        }
        return {};
    }
};