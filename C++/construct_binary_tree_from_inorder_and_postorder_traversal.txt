/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
map<int,int> total;
bool compare(int a,int b)
{
    return total[a]<total[b];
}
class Solution {
public:
    
    TreeNode* test(vector<int> inorder,int pivot)
    {
        if(inorder.size()==0)
        {
            return NULL;
        }
        if(inorder.size()==1)
        {
            return new TreeNode(inorder[0]);
        }
        
        int index=-1;
        for(int i=0;i<inorder.size();i++)
        {
            if(inorder[i]==pivot)
            {
                index=i;
                break;
            }
        }
        TreeNode* root=new TreeNode(inorder[index]);
        vector<int> left(inorder.begin(),inorder.begin()+index);
        vector<int> right(inorder.begin()+index+1,inorder.end());
        int l1=-1;
        int m1=-1;
        int l2=-1;
        int m2=-1;
        for(int i=0;i<left.size();i++)
        {
            if(total[left[i]]>m1)
            {
                m1=total[left[i]];
                l1=left[i];
            }
        }
        for(int i=0;i<right.size();i++)
        {
            if(total[right[i]]>m2)
            {
                m2=total[right[i]];
                l2=right[i];
            }
        }
        root->left=test(left,l1);
        root->right=test(right,l2);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder)
    {
        total.clear();
        for(int i=0;i<postorder.size();i++)
        {
            total[postorder[i]]=i;
        }
        if(inorder.size()==0)
        {
            return NULL;
        }
        int pivot=postorder.back();
        
        return test(inorder,pivot);
    }
};