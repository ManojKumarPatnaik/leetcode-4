class Solution 
{
    public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) 
    {
        sort(initial.begin(),initial.end());
        unordered_set<int> v(initial.begin(),initial.end());
        int result=initial[0];
        unordered_map<int,int> total;
        int n=graph.size();
        for(int current=0;current<n;current++)
        {
            if(v.find(current)==v.end())
            {
                deque<int> q;
                q.push_back(current);
                int c=0;
                int k=-1;
                unordered_set<int> overall;
                overall.insert(current);
                while(q.size()>0)
                {
                    int p=q.front();
                    q.pop_front();
                    if(c>1)
                    {
                        break;
                    }
                    for(int i=0;i<n;i++)
                    {
                        if(c>1)
                        {
                            break;
                        }
                        if(graph[p][i]==1&&overall.find(i)==overall.end())
                        {
                            if(v.find(i)!=v.end())
                            {
                                c++;
                                k=i;
                                continue;
                            }
                            q.push_back(i);
                            overall.insert(i);
                        }
                    }
                }
                if(c==1)
                {
                    total[k]++;
                }
            }
        }
        int M=0;
        for(unordered_map<int,int>::iterator it=total.begin();it!=total.end();it++)
        {
            M=max(M,it->second);
        }
        for(int i=0;i<initial.size();i++)
        {
            if(total[initial[i]]==M)
            {
                return initial[i];
            }
        }
        return result;
    }
};