class WordFilter 
{
    public:
    unordered_map<string,vector<int>> p;
    unordered_map<string,vector<int>> s;
    WordFilter(vector<string>& words) 
    {
        for(int i=0;i<words.size();i++)
        {
            for(int j=0;j<=words[i].length();j++)
            {
                p[words[i].substr(0,j)].push_back(i);
                s[words[i].substr((int)words[i].length()-j)].push_back(i);
            }
        }
    }
    
    int f(string prefix, string suffix) 
    {
        if(p.find(prefix)==p.end()||s.find(suffix)==s.end())
        {
            return -1;
        }
        vector<int> start=p[prefix];
        vector<int> last=s[suffix];
        int p1=(int)start.size()-1;
        int p2=(int)last.size()-1;
        while(p1>=0&&p2>=0)
        {
            if(start[p1]==last[p2])
            {
                return start[p1];
            }
            else if(start[p1]>last[p2])
            {
                p1--;
            }
            else if(start[p1]<last[p2])
            {
                p2--;
            }
        }
        return -1;
    }
};

/**
 * Your WordFilter object will be instantiated and called as such:
 * WordFilter* obj = new WordFilter(words);
 * int param_1 = obj->f(prefix,suffix);
 */