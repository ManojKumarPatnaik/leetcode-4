class Solution 
{
public:
    vector<int> u;
    int find(int x)
    {
        if(x!=u[x])
        {
            u[x]=find(u[x]);
        }
        return u[x];
    }
    void combine(int x,int y)
    {
        u[find(x)]=find(y);
    }
    int regionsBySlashes(vector<string>& grid)
    {
        int r=0;
        int n=grid.size();
        for(int i=0;i<n*n*4;i++)
        {
            u.push_back(i);
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='/')
                {
                    combine(4*(n*i+j)+0,4*(n*i+j)+3);
                    combine(4*(n*i+j)+1,4*(n*i+j)+2);
                }
                else if(grid[i][j]=='\\')
                {
                    combine(4*(n*i+j)+0,4*(n*i+j)+1);
                    combine(4*(n*i+j)+2,4*(n*i+j)+3);                    
                }
                else
                {
                    combine(4*(n*i+j)+0,4*(n*i+j)+1);
                    combine(4*(n*i+j)+1,4*(n*i+j)+2);                                        
                    combine(4*(n*i+j)+2,4*(n*i+j)+3);                                        
                }
                if(i+1<n)
                {
                    combine(4*(n*i+j)+2,4*(n*(i+1)+j)+0);
                }
                if(j+1<n)
                {
                    combine(4*(n*i+j)+1,4*(n*i+j+1)+3);
                }
            }                
        }
        for(int i=0;i<u.size();i++)
        {
            if(i==u[i])
            {
                r++;
            }
        }
        return r;
    }
};