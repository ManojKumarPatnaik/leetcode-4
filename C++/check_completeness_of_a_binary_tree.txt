/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int counter=0;
    int maximum=0;
    vector<vector<int>> result;
    void test(TreeNode* root,int level)
    {
        if(root==NULL)
        {
            return;
        }
        if(level>maximum)
        {
            maximum=level;
        }
        if(result.size()<level)
        {
            vector<int> temp;
            result.push_back(temp);
        }
        result[level-1].push_back(root->val);
        
        if(root->left==NULL&&root->right==NULL)
        {
            if(result.size()<level+1)
            {
                vector<int> temp;
                result.push_back(temp);
            }
            result[level].push_back(-2016);            
            result[level].push_back(-2016);            
        }
        
        if(root->left!=NULL)
        {
            test(root->left,level+1);
        }
        else if(root->right!=NULL)
        {
            if(result.size()<level+1)
            {
                vector<int> temp;
                result.push_back(temp);
            }
            result[level].push_back(-2016);
        }
        if(root->right!=NULL)
        {
            test(root->right,level+1);
        }
        else if(root->left!=NULL)
        {
            if(result.size()<level+1)
            {
                vector<int> temp;
                result.push_back(temp);
            }
            result[level].push_back(-2016);
        }
    }
    bool isCompleteTree(TreeNode* root) 
    {
        if(root==NULL)
        {
            return true;
        }
        test(root,1);
        
        int flag=0;
        for(int i=0;i<result.size();i++)
        {
            for(int j=0;j<result[i].size();j++)
            {
                if(flag==1&&result[i][j]!=-2016)
                {
                    return false;
                }
                if(result[i][j]==-2016)
                {
                    flag=1;
                }
            }
        }
        return true;
    }
};