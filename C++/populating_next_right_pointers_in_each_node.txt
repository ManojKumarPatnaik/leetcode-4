/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() {}

    Node(int _val, Node* _left, Node* _right, Node* _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
public:
    vector<vector<Node*>>total;
    vector<int> t;
    void test(Node* root,int l)
    {
        if(root==NULL)
        {
            return;
        }
        if(total.size()<l)
        {
            vector<Node*> temp;
            total.push_back(temp);
        }
        total[l-1].push_back(root);
        if(root->left!=NULL)
        {
            test(root->left,l+1);
        }
        if(root->right!=NULL)
        {
            test(root->right,l+1);
        }
    }
    void getNext(Node* root,int l)
    {
        if(root==NULL)
        {
            return;
        }
        if(t.size()<l)
        {
            t.push_back(0);
        }
        if(t[l-1]+1<total[l-1].size())
        {
            root->next=total[l-1][t[l-1]+1];
        }
        else
        {
            root->next=NULL;
        }
        t[l-1]+=1;
        if(root->left!=NULL)
        {
            getNext(root->left,l+1);
        }
        if(root->right!=NULL)
        {
            getNext(root->right,l+1);
        }
        
    }
    Node* connect(Node* root) 
    {
        test(root,1);
        /*
        for(int i=0;i<total.size();i++)
        {
            for(int j=0;j<total[i].size();j++)
            {
                cout<<total[i][j]->val<<" ";
            }
            cout<<endl;
        }
        */
        getNext(root,1);
        return root;
    }
};