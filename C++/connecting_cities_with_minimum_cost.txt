bool compare(vector<int> a,vector<int> b)
{
    return a[2]<b[2];
}
class Solution 
{
    public:
    vector<int> a;
    int find(int x)
    {
        if(x!=a[x])
        {
            a[x]=find(a[x]);
        }
        return a[x];
    }
    void u(int x,int y)
    {
        if(x<y)
        {
            a[find(x)]=find(y);
        }
        else
        {
            a[find(y)]=find(x);
        }
    }
    int minimumCost(int N, vector<vector<int>>& connections) 
    {
        int r=0;
        for(int i=0;i<N+1;i++)
        {
            a.push_back(i);
        }
        sort(connections.begin(),connections.end(),compare);
        for(int i=0;i<connections.size();i++)
        {
            if(find(connections[i][0])!=find(connections[i][1]))
            {
                r+=connections[i][2];
                u(connections[i][0],connections[i][1]);
            }
        }
        for(int i=0;i<connections.size();i++)
        {
            u(connections[i][0],connections[i][1]);
        }
        int f=0;
        for(int i=2;i<=N;i++)
        {
            if(a[i]!=a[i-1])
            {
                return -1;
            }
        }
        return r;
    }
};