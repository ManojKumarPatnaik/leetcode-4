class Solution {
public:
    int dp[365+10];
    
    int mincostTickets(vector<int>& days, vector<int>& costs) 
    {
        memset(dp,0,sizeof(dp));
        map<int,int> total;
        int maximum=0;
        for(int i=0;i<days.size();i++)
        {
            total[days[i]]=1;
            maximum=max(days[i],maximum);
        }
        for(int i=1;i<=365;i++)
        {
            if(total[i]==0)
            {
                dp[i]=dp[i-1];
            }
            else
            {
                int minimum=min(costs[0],costs[1]);
                minimum=min(minimum,costs[2]);
                dp[i]=dp[i-1]+minimum;
                if(i<=7)
                {
                    dp[i]=min(dp[i],costs[1]);
                }
                if(i<=30)
                {
                    dp[i]=min(dp[i],costs[2]);
                }
                if(i>=7)
                {
                    dp[i]=min(dp[i-7]+costs[1],dp[i]);               
                }
                if(i>=30)
                {
                    dp[i]=min(dp[i-30]+costs[2],dp[i]);
                }
            }
        }
        if(maximum<=30)
        {
            dp[365]=min(dp[365],costs[2]);
        }
        if(maximum<=7)
        {
            dp[365]=min(dp[365],costs[1]);
        }
        return dp[365];
    }
};