class Solution 
{
    public:
    bool check(int middle,vector<vector<int>> &d)
    {
        int m=d.size();
        int n=d[0].size();
        int dp[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                dp[i][j]=-2147483648;   
            }
        }
        if(d[0][0]<=middle)
        {
            return false;   
        }
        dp[0][0]=d[0][0];
        for(int i=1;i<m;i++)
        {
            if(dp[i-1][0]!=-2147483648&&dp[i-1][0]+d[i][0]>middle)
            {
                dp[i][0]=dp[i-1][0]+d[i][0];
            }
        }
        for(int i=1;i<n;i++)
        {
            if(dp[0][i-1]!=-2147483648&&dp[0][i-1]+d[0][i]>middle)
            {
                dp[0][i]=dp[0][i-1]+d[0][i];
            }
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                if(dp[i-1][j]!=-2147483648&&dp[i-1][j]+d[i][j]>middle)
                {
                    dp[i][j]=dp[i-1][j]+d[i][j];   
                }
                if(dp[i][j-1]!=-2147483648&&dp[i][j-1]+d[i][j]>middle)
                {
                    dp[i][j]=max(dp[i][j],dp[i][j-1]+d[i][j]);   
                }
            }
        }
        return dp[m-1][n-1]>middle;
    }
    int calculateMinimumHP(vector<vector<int>>& dungeon) 
    {
        long long int p1=-2147483648;
        long long int p2=0;
        while(p1<p2)
        {
            long long int middle=p1+(long long int)(p2-p1)/(long long int)2;
            if(check((int)middle,dungeon))
            {
                p1=middle+1;
            }
            else
            {
                p2=middle;
            }
        }
        return max(-(int)p1+1,1);
    }
};