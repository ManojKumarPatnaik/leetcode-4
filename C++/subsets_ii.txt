class Solution {
public:
    vector<vector<int>> result;
    map<string,int> total;
    void dfs(vector<int> nums,vector<int> temp,int index)
    {
        if(index>=nums.size())
        {
            string r="";
            for(int i=0;i<temp.size();i++)
            {
                r+=to_string(temp[i]);
                r+=",";
            }
            if(total.find(r)==total.end())
            {
                total[r]=1;
                result.push_back(temp);       
            }
            return;
        }
        string r="";
        for(int i=0;i<temp.size();i++)
        {
            r+=to_string(temp[i]);
            r+=",";
        }
        if(total.find(r)==total.end())
        {
            total[r]=1;
            result.push_back(temp);       
        }
        temp.push_back(nums[index]);
        dfs(nums,temp,index+1);
        temp.pop_back();
        dfs(nums,temp,index+1);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) 
    {
        sort(nums.begin(),nums.end());
        vector<int> temp;
        dfs(nums,temp,0);
        return result;
    }
};