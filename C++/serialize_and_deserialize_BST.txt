/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec 
{
    public:

    // Encodes a tree to a single string.
    void s(TreeNode* root,string &r)
    {
        if(root==NULL)
        {
            r+="# ";
            return;
        }
        r+=to_string(root->val)+" ";
        s(root->left,r);
        s(root->right,r);
    }
    string serialize(TreeNode* root) 
    {
        string r="";
        s(root,r);
        return r;
    }
    // Decodes your encoded data to tree.
    TreeNode* d(vector<string>& s,int &i)
    {
        if(s[i]=="#"||i>=(int)s.size())
        {
            return NULL;
        }
        TreeNode* r=new TreeNode(stoi(s[i]));
        r->left=d(s,++i);
        r->right=d(s,++i);
        return r;
    }
    TreeNode* deserialize(string data) 
    {
        vector<string> total;
        string temp="";
        for(int i=0;i<data.length();i++)
        {
            if(data[i]!=' ')
            {
                temp+=data[i];
            }
            else
            {
                total.push_back(temp);
                temp="";
            }
        }
        int i=0;
        return d(total,i);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));