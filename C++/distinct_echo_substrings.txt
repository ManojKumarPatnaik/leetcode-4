class Solution 
{
    public:
    long powmod(int a,int b,int m)
    {
        long result=1;
        long base=a;
        while(b)
        {
            if(b%2==1)
            {
                result=(result*base)%m;
            }
            base=((base%m)*(base%m))%m;
            b>>=1;
        }
        return result%m;
    }
    int distinctEchoSubstrings(string text) 
    {
        unordered_set<int> total;
        int m=1000000007;
        int n=text.length();
        for(int l=1;l<=n/2;l++)
        {
            int p1=0;
            int p2=p1+l;
            long c1=0;
            long c2=0;
            for(int i=0;i<l;i++)
            {
                c1=(c1+(text[i]+1-'a')*powmod(27,l-1-i,m)+m)%m;
                c2=(c2+(text[i+l]+1-'a')*powmod(27,l-1-i,m)+m)%m;
            }
            if(c1==c2)
            {
                total.insert(c1);
            }
            while(p2+l<n)
            {
                c1=((c1-(text[p1]+1-'a')*powmod(27,l-1,m))+m)%m;
                c2=((c2-(text[p2]+1-'a')*powmod(27,l-1,m))+m)%m;
                c1=(c1*27)%m;
                c2=(c2*27)%m;
                c1=c1+(text[p1+l]+1-'a');
                c2=c2+(text[p2+l]+1-'a');
                c1=(c1+2*m)%m;
                c2=(c2+2*m)%m;
                if(c1==c2)
                {
                    total.insert(c1);
                }
                p1++;
                p2++;
            }
        }
        return (int)total.size();
    }
};