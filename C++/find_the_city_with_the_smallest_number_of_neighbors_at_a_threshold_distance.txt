class Solution 
{
    public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) 
    {
        int result=-1;
        int m=2147483647;
        vector<int> overall;
        unordered_map<int,vector<pair<int,int>>> total;
        for(int i=0;i<edges.size();i++)
        {
            total[edges[i][0]].push_back({edges[i][1],edges[i][2]});
            total[edges[i][1]].push_back({edges[i][0],edges[i][2]});
        }
        for(int i=0;i<n;i++)
        {
            int start=i;
            unordered_map<int,int> m;
            m[i]=distanceThreshold;
            deque<int> q={i};
            deque<int> c={distanceThreshold};
            while(q.size()>0)
            {
                int p=q.front();
                int k=c.front();
                q.pop_front();
                c.pop_front();
                for(int j=0;j<total[p].size();j++)
                {
                    if((m.find(total[p][j].first)==m.end()||k-total[p][j].second>m[total[p][j].first])&&k-total[p][j].second>=0)
                    {
                        q.push_back(total[p][j].first);
                        c.push_back(k-total[p][j].second);
                        m[total[p][j].first]=k-total[p][j].second;
                    }
                }
            }
            overall.push_back((int)m.size());
        }
        for(int i=0;i<overall.size();i++)
        {
            if(overall[i]<=m)
            {
                m=overall[i];
                result=i;
            }
        }
        return result;
    }
};