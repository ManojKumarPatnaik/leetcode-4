class Solution 
{
    public:
    void dfs(vector<vector<int>>& A,int i,int j,vector<pair<int,int>>& total)
    {
        if(i<0||j<0||i>=A.size()||j>=A[0].size()||A[i][j]==0)
        {
            return;   
        }
        A[i][j]=0;
        total.push_back({i,j});
        dfs(A,i+1,j,total);
        dfs(A,i-1,j,total);
        dfs(A,i,j+1,total);
        dfs(A,i,j-1,total);
    }
    vector<pair<int,int>> normalized(vector<pair<int,int>> temp)
    {
        vector<vector<pair<int,int>>> total(8);
        for(int i=0;i<temp.size();i++)
        {
            int x=temp[i].first;
            int y=temp[i].second;
            total[0].push_back({x,y});
            total[1].push_back({x,-y});
            total[2].push_back({-x,y});
            total[3].push_back({-x,-y});
            total[4].push_back({y,x});
            total[5].push_back({y,-x});
            total[6].push_back({-y,x});
            total[7].push_back({-y,-x});
        }
        for(int i=0;i<8;i++)
        {
            sort(total[i].begin(),total[i].end());
            for(int j=(int)total[i].size()-1;j>-1;j--)
            {
                total[i][j].first-=total[i][0].first;
                total[i][j].second-=total[i][0].second;
            }
        }
        sort(total.begin(),total.end());
        return total[0];
    }
    int numDistinctIslands2(vector<vector<int>>& grid) 
    {
        set<vector<pair<int,int>>> total;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
            {
                if(grid[i][j]==1)
                {
                    vector<pair<int,int>> temp;
                    dfs(grid,i,j,temp);
                    total.insert(normalized(temp));
                }
            }
        }
        return total.size();
    }
};