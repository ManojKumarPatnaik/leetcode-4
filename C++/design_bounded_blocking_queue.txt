from threading import Semaphore
class BoundedBlockingQueue(object):
    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.c=capacity
        self.l=[]
        self.locks1=Semaphore(self.c)
        self.locks2=Semaphore(self.c)
        for i in range(0,self.c):
            self.locks2.acquire()
    def enqueue(self, element):
        """
        :type element: int
        :rtype: void
        """
        self.locks1.acquire()
        self.l.insert(0,element)
        self.locks2.release()

    def dequeue(self):
        """
        :rtype: int
        """
        self.locks2.acquire()
        temp=self.l[-1]
        self.l.pop()
        self.locks1.release()
        return temp

    def size(self):
        """
        :rtype: int
        """
        return len(self.l)