class SnakeGame 
{
    public:
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    set<string> paths;
    deque<string> overall;
    int x=0;
    int y=0;
    int c=0;
    int w;
    int h;
    vector<vector<int>> f;
    string current;
    SnakeGame(int width, int height, vector<vector<int>>& food) 
    {
        string temp=to_string(x)+","+to_string(y);
        paths.insert(temp);
        overall.push_back(temp);
        w=width;
        h=height;
        f=food;
        if(food.size()>0)
        {
            current=to_string(food[0][0])+","+to_string(food[0][1]);
        }
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    int move(string direction) 
    {
        if(direction=="U")
        {
            x--;
        }
        else if(direction=="D")
        {
            x++;
        }
        else if(direction=="L")
        {
            y--;
        }
        else if(direction=="R")
        {
            y++;
        }
        string temp=to_string(x)+","+to_string(y);

        if(x<0)
        {
            return -1;   
        }
        if(x>=h)
        {
            return -1;   
        }            
        if(y<0)
        {
            return -1;   
        }
        if(y>=w)
        {
            return -1;   
        }
        if(paths.find(temp)!=paths.end()&&overall.front()!=temp)
        {
            return -1;
        }
        paths.insert(temp);
        overall.push_back(temp);
        if(temp==current)
        {
            c++;
            if(c<f.size())
            {
                current=to_string(f[c][0])+","+to_string(f[c][1]);
            }
            else
            {
                current="";   
            }
            return c;
        }
        if(overall.front()!=temp)
        {
            paths.erase(overall.front());
        }
        overall.pop_front();
        return c;
    }
};

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame* obj = new SnakeGame(width, height, food);
 * int param_1 = obj->move(direction);
 */