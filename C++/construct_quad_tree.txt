/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;

    Node() {}

    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
public:
    Node* construct(vector<vector<int>>& grid)
    {
        if(grid.size()==1)
        {
            return new Node(grid[0][0]==1,true,NULL,NULL,NULL,NULL);
        }
        int n=grid.size();
        vector<vector<int>> tl;
        vector<vector<int>> tr;
        vector<vector<int>> bl;
        vector<vector<int>> br;
        for(int i=0;i<n/2;i++)
        {
            vector<int> temp(grid[i].begin(),grid[i].begin()+n/2);
            tl.push_back(temp);
        }
        for(int i=0;i<n/2;i++)
        {
            vector<int> temp(grid[i].begin()+n/2,grid[i].end());
            tr.push_back(temp);
        }
        for(int i=n/2;i<n;i++)
        {
            vector<int> temp(grid[i].begin(),grid[i].begin()+n/2);
            bl.push_back(temp);
        }
        for(int i=n/2;i<n;i++)
        {
            vector<int> temp(grid[i].begin()+n/2,grid[i].end());
            br.push_back(temp);
        }
        Node* TL=construct(tl);
        Node* TR=construct(tr);
        Node* BL=construct(bl);
        Node* BR=construct(br);
        if(TL->isLeaf&&TR->isLeaf&&BL->isLeaf&&BR->isLeaf&&TL->val==TR->val&&TL->val==BL->val&&TL->val==BR->val)
        {
            return new Node(TL->val,true,NULL,NULL,NULL,NULL);
        }
        else
        {
            return new Node(true,false,TL,TR,BL,BR);
        }
    }
};