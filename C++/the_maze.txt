class Solution 
{
    public:
    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) 
    {
        int m=maze.size();
        int n=maze[0].size();
        if(maze[start[0]][start[1]]==1)
        {
            return false;   
        }
        if(maze[destination[0]][destination[1]]==1)
        {
            return false;
        }
        unordered_set<string> total;
        deque<int> x;
        deque<int> y;
        deque<int> d;
        x.push_back(start[0]);
        y.push_back(start[1]);
        d.push_back(0);
        total.insert(to_string(start[0])+","+to_string(start[1])+","+to_string(0));
        
        x.push_back(start[0]);
        y.push_back(start[1]);
        d.push_back(1);
        total.insert(to_string(start[0])+","+to_string(start[1])+","+to_string(1));
        
        x.push_back(start[0]);
        y.push_back(start[1]);
        d.push_back(2);
        total.insert(to_string(start[0])+","+to_string(start[1])+","+to_string(2));
        
        x.push_back(start[0]);
        y.push_back(start[1]);
        d.push_back(3);        
        total.insert(to_string(start[0])+","+to_string(start[1])+","+to_string(3));
        
        while(x.size()>0)
        {
            int x_t=x.front();
            int y_t=y.front();
            int d_t=d.front();
            x.pop_front();
            y.pop_front();
            d.pop_front();
            
            if(x_t==destination[0]&&y_t==destination[1])
            {
                if(d_t==0&&(x_t==0||(x_t>0&&maze[x_t-1][y_t]==1)))
                {
                    return true;   
                }
                if(d_t==1&&(y_t==0||(y_t>0&&maze[x_t][y_t-1]==1)))
                {
                    return true;   
                }
                if(d_t==2&&(x_t==m-1||(x_t<m-1&&maze[x_t+1][y_t]==1)))
                {
                    return true;   
                }
                if(d_t==3&&(y_t==n-1||(y_t<n-1&&maze[x_t][y_t+1]==1)))
                {
                    return true;   
                }
            }
            if(x_t>0&&maze[x_t-1][y_t]==0&&total.find(to_string(x_t-1)+","+to_string(y_t)+","+to_string(0))==total.end())
            {
                if(d_t==0)
                {
                    x.push_back(x_t-1);
                    y.push_back(y_t);
                    d.push_back(0);
                    total.insert(to_string(x_t-1)+","+to_string(y_t)+","+to_string(0));
                }
                else if(d_t==1)
                {
                    if(y_t==0||(y_t>0&&maze[x_t][y_t-1]==1))
                    {
                        x.push_back(x_t-1);
                        y.push_back(y_t);
                        d.push_back(0);                        
                        total.insert(to_string(x_t-1)+","+to_string(y_t)+","+to_string(0));
                    }
                }
                else if(d_t==3)
                {
                    if(y_t==n-1||(y_t<n-1&&maze[x_t][y_t+1]==1))
                    {
                        x.push_back(x_t-1);
                        y.push_back(y_t);
                        d.push_back(0);                        
                        total.insert(to_string(x_t-1)+","+to_string(y_t)+","+to_string(0));
                    }                    
                }
            }
            if(y_t>0&&maze[x_t][y_t-1]==0&&total.find(to_string(x_t)+","+to_string(y_t-1)+","+to_string(1))==total.end())
            {
                if(d_t==1)
                {
                    x.push_back(x_t);
                    y.push_back(y_t-1);
                    d.push_back(1);                    
                    total.insert(to_string(x_t)+","+to_string(y_t-1)+","+to_string(1));
                }
                else if(d_t==0)
                {
                    if(x_t==0||(x_t>0&&maze[x_t-1][y_t]==1))
                    {
                        x.push_back(x_t);
                        y.push_back(y_t-1);
                        d.push_back(1);                        
                        total.insert(to_string(x_t)+","+to_string(y_t-1)+","+to_string(1));
                    }                    
                }
                else if(d_t==2)
                {
                    if(x_t==m-1||(x_t<m-1&&maze[x_t+1][y_t]==1))
                    {
                        x.push_back(x_t);
                        y.push_back(y_t-1);
                        d.push_back(1);                        
                        total.insert(to_string(x_t)+","+to_string(y_t-1)+","+to_string(1));
                    }                                        
                }
            }
            if(x_t<m-1&&maze[x_t+1][y_t]==0&&total.find(to_string(x_t+1)+","+to_string(y_t)+","+to_string(2))==total.end())
            {
                if(d_t==2)
                {
                    x.push_back(x_t+1);
                    y.push_back(y_t);
                    d.push_back(2);
                    total.insert(to_string(x_t+1)+","+to_string(y_t)+","+to_string(2));
                }
                else if(d_t==1)
                {
                    if(y_t==0||(y_t>0&&maze[x_t][y_t-1]==1))
                    {
                        x.push_back(x_t+1);
                        y.push_back(y_t);
                        d.push_back(2);                        
                        total.insert(to_string(x_t+1)+","+to_string(y_t)+","+to_string(2));
                    }
                }
                else if(d_t==3)
                {
                    if(y_t==n-1||(y_t<n-1&&maze[x_t][y_t+1]==1))
                    {
                        x.push_back(x_t+1);
                        y.push_back(y_t);
                        d.push_back(2);                        
                        total.insert(to_string(x_t+1)+","+to_string(y_t)+","+to_string(2));
                    }                    
                }
            }
            if(y_t<n-1&&maze[x_t][y_t+1]==0&&total.find(to_string(x_t)+","+to_string(y_t+1)+","+to_string(3))==total.end())
            {
                if(d_t==3)
                {
                    x.push_back(x_t);
                    y.push_back(y_t+1);
                    d.push_back(3);                    
                    total.insert(to_string(x_t)+","+to_string(y_t+1)+","+to_string(3));
                }
                else if(d_t==0)
                {
                    if(x_t==0||(x_t>0&&maze[x_t-1][y_t]==1))
                    {
                        x.push_back(x_t);
                        y.push_back(y_t+1);
                        d.push_back(3);                        
                        total.insert(to_string(x_t)+","+to_string(y_t+1)+","+to_string(3));
                    }                    
                }
                else if(d_t==2)
                {
                    if(x_t==m-1||(x_t<m-1&&maze[x_t+1][y_t]==1))
                    {
                        x.push_back(x_t);
                        y.push_back(y_t+1);
                        d.push_back(3);                        
                        total.insert(to_string(x_t)+","+to_string(y_t+1)+","+to_string(3));
                    }                                        
                }
            }
        }
        
        return false;
    }
};