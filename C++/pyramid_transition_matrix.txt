class Solution 
{
    public:
    map<string,vector<char>> total;
    bool result=false;
    bool pyramidTransition(string bottom, vector<string>& allowed) 
    {
        for(int i=0;i<allowed.size();i++)
        {
            string temp="";
            temp+=allowed[i][0];
            temp+=allowed[i][1];
            total[temp].push_back(allowed[i][2]);
        }
        helper(bottom,0,"");
        return result;
    }
    void helper(string bottom,int start,string next)
    {
        if(result==true)
        {
            return;
        }
        if(bottom.length()==1)
        {
            result=true;
            return;
        }
        if(start==(int)bottom.length()-1)
        {
            helper(next,0,"");
        }
        for(map<string,vector<char>>::iterator it=total.begin();it!=total.end();it++)
        {
            if(it->first==bottom.substr(start,2))
            {
                for(int i=0;i<it->second.size();i++)
                {
                    helper(bottom,start+1,next+it->second[i]);
                }
            }
        }
    }
};