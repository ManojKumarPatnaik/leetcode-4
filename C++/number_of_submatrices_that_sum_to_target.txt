class Solution 
{
    public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) 
    {
        int m=matrix.size();
        int n=matrix[0].size();
        vector<vector<int>> r;
        vector<vector<int>> s(m+1,vector<int>(n+1,0));
        r.push_back(vector<int>(n+1,0));
        for(int i=0;i<m;i++)
        {
            vector<int> temp;
            temp.push_back(0);
            for(int j=0;j<n;j++)
            {
                temp.push_back(temp.back()+matrix[i][j]);
            }
            r.push_back(temp);
        }
        for(int i=0;i<m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                s[i+1][j]=s[i][j]+r[i+1][j];
            }
        }
        
        int c=0;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<=n;j++)
            {
                unordered_map<int,int> overall;
                for(int k=0;k<=m;k++)
                {
                    int current=s[k][j]-s[k][i];
                    if(overall.find(current-target)!=overall.end())
                    {
                        c+=overall[current-target];
                    }
                    overall[current]++;
                }                
            }
        }
        return c;
    }
};