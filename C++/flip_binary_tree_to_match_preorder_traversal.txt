/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution 
{
    public:
    vector<int> result;
    int i=0;
    bool dfs(TreeNode* root,vector<int>& voyage)
    {
        if(root==NULL)
        {
            return true;
        }
        if(root->val!=voyage[i])
        {
            return false;
        }
        i++;
        if(root->left!=NULL&&root->left->val!=voyage[i])
        {
            result.push_back(root->val);
            return dfs(root->right,voyage)&&dfs(root->left,voyage);
        }
        return dfs(root->left,voyage)&&dfs(root->right,voyage);
    }
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) 
    {
        if(!dfs(root,voyage))
        {
            return {-1};
        }
        return result;
    }
};