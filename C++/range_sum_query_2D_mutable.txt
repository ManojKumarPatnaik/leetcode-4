class NumMatrix 
{
    public:
    vector<vector<int>> mat;
    vector<vector<int>> bit;
    NumMatrix(vector<vector<int>>& matrix) 
    {
        if(matrix.size()==0||matrix[0].size()==0)
        {
            return;   
        }
        int m=matrix.size();
        int n=matrix[0].size();
        mat.resize(m+1,vector<int>(n+1,0));
        bit.resize(m+1,vector<int>(n+1,0));
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                update(i,j,matrix[i][j]);
            }
        }
    }
    
    void update(int row, int col, int val) 
    {
        int d=val-mat[row+1][col+1];
        for(int i=row+1;i<mat.size();i+=(i&-i))
        {
            for(int j=col+1;j<mat[0].size();j+=(j&-j))
            {
                bit[i][j]+=d;
            }
        }
        mat[row+1][col+1]=val;
    }
    int getSum(int row,int col)
    {
        int s=0;
        for(int i=row;i>0;i-=(i&-i))
        {
            for(int j=col;j>0;j-=(j&-j))
            {
                s+=bit[i][j];
            }
        }
        return s;
    }
    int sumRegion(int row1, int col1, int row2, int col2) 
    {
        return getSum(row2+1,col2+1)+getSum(row1,col1)-getSum(row2+1,col1)-getSum(row1,col2+1);
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * obj->update(row,col,val);
 * int param_2 = obj->sumRegion(row1,col1,row2,col2);
 */