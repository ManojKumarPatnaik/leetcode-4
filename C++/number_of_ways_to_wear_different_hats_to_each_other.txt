class Solution 
{
    public:
    int numberWays(vector<vector<int>>& hats) 
    {
        int m=1000000007;
        int n=hats.size();
        int b=pow(2,n);
        int max_id=0;
        for(int i=0;i<hats.size();i++)
        {
            for(int j=0;j<hats[i].size();j++)
            {
                max_id=max(max_id,hats[i][j]);
            }
        }
        int dp[b+1][max_id+1];
        memset(dp,0,sizeof(dp));
        dp[0][0]=1;
        vector<unordered_set<int>> total;
        for(int i=0;i<hats.size();i++)
        {
            unordered_set<int> current(hats[i].begin(),hats[i].end());
            total.push_back(current);
        }
        for(int i=1;i<=max_id;i++)
        {
            for(int j=0;j<b;j++)
            {
                dp[j][i]=(dp[j][i]+dp[j][i-1])%m;
                for(int k=0;k<n;k++)
                {
                    if(j&(1<<k))
                    {
                        if(total[k].find(i)!=total[k].end())
                        {
                            dp[j][i]=(dp[j][i]+dp[j^(1<<k)][i-1])%m;
                        }
                    }
                }
            }
        }
        return dp[b-1][max_id];
    }
};