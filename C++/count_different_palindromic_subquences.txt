class Solution 
{
    public:
    int countPalindromicSubsequences(string s) 
    {
        long m=1000000007;
        int n=s.length();
        long dp[n][n];
        memset(dp,0,sizeof(dp));
        for(int i=0;i<n;i++)
        {
            dp[i][i]=1;
        }
        for(int l=1;l<n;l++)
        {
            for(int i=0;i<n-l;i++)
            {
                int j=i+l;
                if(s[i]==s[j])
                {
                    int left=i+1;
                    int right=j-1;
                    while(left<j&&s[left]!=s[i])
                    {
                        left++;
                    }
                    while(right>i&&s[right]!=s[j])
                    {
                        right--;
                    }
                    if(left>right)
                    {
                        dp[i][j]=dp[i+1][j-1]*2+2;
                    }
                    else if(left==right)
                    {
                        dp[i][j]=dp[i+1][j-1]*2+1;
                    }
                    else
                    {
                        dp[i][j]=dp[i+1][j-1]*2-dp[left+1][right-1];
                    }
                }
                else
                {
                    dp[i][j]=dp[i+1][j]+dp[i][j-1]-dp[i+1][j-1];
                }
                dp[i][j]+=m;
                dp[i][j]%=m;
            }
        }
        return (int)dp[0][n-1];
    }
};